// *** Removes movement restriction from shamanic dance ***

COPY_EXISTING ~spsh003.spl~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    LPF ADD_SPELL_EFFECT
      INT_VAR
        opcode = 126  // Movement rate bonus
        target = 1    // Self
        parameter1 = 50
        parameter2 = 2  // Set % of
        duration = 7
    END
  END
BUT_ONLY

COPY_EXISTING ~spsh004.spl~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
    LPF DELETE_SPELL_EFFECT
      INT_VAR opcode_to_delete = 363  // Movement rate check
    END
  END
BUT_ONLY


// Revising spirit creature script
COPY_EXISTING ~bdshunsu.bcs~ ~override~
  DECOMPILE_AND_PATCH BEGIN
    REPLACE_TEXTUALLY CASE_INSENSITIVE ~!CheckSpellState(Player[2-6],.+)~ ~~
    REPLACE_TEXTUALLY CASE_INSENSITIVE ~!CheckSpellState(Player1,\(.+\))~ ~!CheckSpellState(LastSummonerOf(Myself),\1)~
    REPLACE_TEXTUALLY CASE_INSENSITIVE ~\[.+\.0\.0\.SHAMAN\]~ ~LastSummonerOf(Myself)~
    REPLACE_TEXTUALLY CASE_INSENSITIVE ~!CheckSpellState(LastSummonerOf(Myself),SHAMANIC_DANCE)~ ~Global("Unsummon","LOCALS",1) GlobalTimerExpired("UnsummonTimer","LOCALS")~
  END
BUT_ONLY

// Applying "target acquisition"
<<<<<<<< .../inlined/shaman_dance/bdshunsu_init.baf
IF
  InPartySlot(LastSummonerOf(Myself),%slot_zero%)
  Global("Summoner","LOCALS",0)
THEN
  RESPONSE #100
    SetGlobal("Summoner","LOCALS",%slot%)
    Continue()
END

IF
  Global("Summoner","LOCALS",%slot%)
  OR(2)
    !ModalStateObject(Player%slot%,SHAMANDANCE)
    StateCheck(Player%slot%,CD_STATE_NOTVALID)
  Global("Unsummon","LOCALS",0)
THEN
  RESPONSE #100
    SetGlobal("Unsummon","LOCALS",1)
    SetGlobalTimer("UnsummonTimer","LOCALS",3)
    Continue()
END

IF
  Global("Summoner","LOCALS",%slot%)
  ModalStateObject(Player%slot%,SHAMANDANCE)
  !StateCheck(Player%slot%,CD_STATE_NOTVALID)
  Global("Unsummon","LOCALS",1)
THEN
  RESPONSE #100
    SetGlobal("Unsummon","LOCALS",0)
    Continue()
END
>>>>>>>>
OUTER_FOR (slot = 6; slot > 0; --slot) BEGIN
  OUTER_SET slot_zero = slot - 1
  EXTEND_TOP ~bdshunsu.bcs~ ~.../inlined/shaman_dance/bdshunsu_init.baf~ EVAL
END

// "Return to summoner" block (combat version)
<<<<<<<< .../inlined/shaman_dance/bdshunsu_return_combat.baf
IF
  Allegiance(Myself,GOODCUTOFF)
  Global("Summoner","LOCALS",%slot%)
  !Range(Player%slot%,26)
  !CombatCounter(0)
  !See(NearestEnemyOf(Myself))
THEN
  RESPONSE #100
    MoveToObject(Player%slot%)
END
>>>>>>>>
COPY ~.../inlined/shaman_dance/bdshunsu_return_combat.baf~ ~.../inlined/shaman_dance/bdshunsu_return_combat.baf~
  READ_ASCII 0 block_return_combat (BUFFER_LENGTH)
BUT_ONLY

COPY_EXISTING ~bdshunsu.bcs~ ~override~
  DECOMPILE_AND_PATCH BEGIN
    // updating spirit's MoveToObject() block
    LPF GET_SCRIPT_BLOCK
      STR_VAR search_regexp = ~MoveToObject(.*)~
      RET script_block start_offset end_offset
    END
    PATCH_IF (start_offset >= 0) BEGIN
      DELETE_BYTES start_offset (end_offset - start_offset)
      SET end_offset = start_offset

      FOR (slot = 6; slot > 0; --slot) BEGIN
        INNER_PATCH_SAVE block_final ~%script_block%~ BEGIN
          TEXT_SPRINT action_combatcounter ~~
          PATCH_IF (INDEX_BUFFER(~CombatCounter~) < 0 && INDEX_BUFFER(~ActuallyInCombat~) < 0) BEGIN
            TEXT_SPRINT action_combatcounter ~CombatCounter(0)~
          END
          REPLACE_TEXTUALLY ~!Range(.*)~ ~!Range(Player%slot%,12) Global("Summoner","LOCALS",%slot%) %action_combatcounter%~
          REPLACE_TEXTUALLY ~\(!?\)Detect(.*)~ ~!Range(Player%slot%,12) Global("Summoner","LOCALS",%slot%) %action_combatcounter%~
          REPLACE_TEXTUALLY ~MoveToObject(.*)~ ~MoveToObject(Player%slot%)~
        END
        SET len = STRING_LENGTH ~%block_final%~
        INSERT_BYTES start_offset len
        WRITE_ASCIIE start_offset ~%block_final%~ (len)
        INSERT_BYTES start_offset 1
        WRITE_ASCIIE start_offset ~%LNL%~ (1)
        SET end_offset += len + 1
      END

      // adding secondary MoveToObject() blocks
      SET start_offset = INDEX_BUFFER(~^IF$~ end_offset)
      PATCH_IF (start_offset >= end_offset) BEGIN
        FOR (slot = 6; slot > 0; --slot) BEGIN
          TEXT_SPRINT block EVAL ~%block_return_combat%~
          SET block_len = STRING_LENGTH ~%block%~
          INSERT_BYTES start_offset block_len
          WRITE_ASCIIE start_offset ~%block%~ (block_len)
          SET end_offset += block_len
        END
      END

      // applying spirit's unsummon action when out of range
      LPF GET_SCRIPT_BLOCK
        INT_VAR start_offset = end_offset
        STR_VAR search_regexp = ~!\(Range\|Detect\)(.*)~
        RET script_block start_offset end_offset
      END
      PATCH_IF (start_offset >= 0) BEGIN
        DELETE_BYTES start_offset (end_offset - start_offset)

        FOR (slot = 6; slot > 0; --slot) BEGIN
          INNER_PATCH_SAVE block_final ~%script_block%~ BEGIN
            REPLACE_TEXTUALLY ~!Range([^,]*,\(.*\))~ ~!Detect(Player%slot%,\1) Global("Summoner","LOCALS",%slot%)~
            REPLACE_TEXTUALLY ~!Detect(.*)~ ~!Detect(Player%slot%) Global("Summoner","LOCALS",%slot%)~
          END
          SET len = STRING_LENGTH ~%block_final%~
          INSERT_BYTES start_offset len
          WRITE_ASCIIE start_offset ~%block_final%~ (len)
          INSERT_BYTES start_offset 1
          WRITE_ASCIIE start_offset ~%LNL%~ (1)
        END
      END
    END
  END
BUT_ONLY


COPY_EXISTING ~bdsum00.bcs~ ~override~
  DECOMPILE_AND_PATCH BEGIN
    SET start_offset = 0
    SET end_offset = 0
    WHILE (start_offset >= 0) BEGIN
      LPF GET_SCRIPT_BLOCK
        INT_VAR start_offset = end_offset
        STR_VAR search_regexp = ~AttackOneRound~
        RET script_block start_offset end_offset
      END

      PATCH_IF (start_offset >= 0) BEGIN
        DELETE_BYTES start_offset (end_offset - start_offset)
        SET end_offset = start_offset

        // ensure spirits are unsummoned when leaving visual range of the summoner
        INNER_PATCH_SAVE block_final ~%script_block%~ BEGIN
          PATCH_IF (INDEX_BUFFER(~See(~) < 0) BEGIN
            REPLACE_TEXTUALLY CASE_SENSITIVE EXACT_MATCH ~THEN~ ~See(LastSeenBy(Myself))%LNL%THEN~
          END
        END

        // improving attack behavior
        PATCH_IF (INDEX(~Allegiance(Myself,GOODCUTOFF)~ ~%block_final%~) >= 0) BEGIN
          // ensure that spirits don't roam too far from their summoner
          TEXT_SPRINT script_block ~%block_final%~
          FOR (slot = 6; slot > 0; --slot) BEGIN
            TEXT_SPRINT new_triggers ~Global("Summoner","LOCALS",%slot%) OR(2) Range(LastSeenBy(Myself),3) TriggerOverride(LastSeenBy(Myself),Range(Player%slot%,26))~
            INNER_PATCH_SAVE block_final ~%script_block%~ BEGIN
              REPLACE_TEXTUALLY ~Allegiance(Myself,GOODCUTOFF)~ ~%new_triggers% Allegiance(Myself,GOODCUTOFF)~
            END
            SET len = STRING_LENGTH ~%block_final%~
            INSERT_BYTES start_offset len
            WRITE_ASCIIE start_offset ~%block_final%~ (len)
            INSERT_BYTES start_offset 1
            WRITE_ASCIIE start_offset ~%LNL%~ (1)
            SET end_offset += len + 1
          END
        END ELSE PATCH_IF (INDEX(~Allegiance(Myself,EVILCUTOFF)~ ~%block_final%~) >= 0) BEGIN
          // this block is irrelevant for us: specifically exclude shamanic spirits
          TEXT_SPRINT script_block ~%block_final%~
          INNER_PATCH_SAVE block_final ~%script_block%~ BEGIN
            REPLACE_TEXTUALLY ~Allegiance(Myself,EVILCUTOFF)~ ~Allegiance(Myself,EVILCUTOFF) !Specifics(Myself,SPIRIT)~
          END
          SET len = STRING_LENGTH ~%block_final%~
          INSERT_BYTES start_offset len
          WRITE_ASCIIE start_offset ~%block_final%~ (len)
          INSERT_BYTES start_offset 1
          WRITE_ASCIIE start_offset ~%LNL%~ (1)
          SET end_offset += len + 1
        END ELSE BEGIN
          // no further changes
          SET len = STRING_LENGTH ~%block_final%~
          INSERT_BYTES start_offset len
          WRITE_ASCIIE start_offset ~%block_final%~ (len)
          INSERT_BYTES start_offset 1
          WRITE_ASCIIE start_offset ~%LNL%~ (1)
          SET end_offset += len + 1
        END
      END
    END
  END
BUT_ONLY


// Updating class description
LAF UPDATE_CLASS_DESC
  INT_VAR newDesc = RESOLVE_STR_REF(@100)
  STR_VAR className = "SHAMAN"
END


// Making changes to Advanced AI scripts to support new dance behavior
COPY_EXISTING - ~partyai.2da~ ~override~
  READ_2DA_ENTRY 1 0 1 defScript

ACTION_IF (FILE_EXISTS_IN_GAME ~%defScript%.BCS~) BEGIN
  // patching default AI script
  COPY_EXISTING ~%defScript%.BCS~ ~override~
    DECOMPILE_AND_PATCH BEGIN
      SET startIndex = INDEX_BUFFER ( ~IF[ %TAB%%WNL%]+ModalState(SHAMANDANCE)~ )
      PATCH_IF (startIndex >= 0) BEGIN
        SET endIndex = INDEX_BUFFER ( ~[%WNL%]END[%WNL%]~ startIndex)
        PATCH_IF (endIndex > startIndex) BEGIN
          TEXT_SPRINT searchText ~NoAction()~
          SET searchLen = STRING_LENGTH ~%searchText%~
          SET curIndex = INDEX_BUFFER ( ~%searchText%~ startIndex )
          PATCH_IF (curIndex > startIndex && curIndex < endIndex) BEGIN
            DELETE_BYTES curIndex searchLen
          END
        END
      END
    END
END


// Adding French translation of vanilla creature names
ACTION_IF (~%LANGUAGE%~ STR_EQ ~french~) BEGIN
  // Updating creature names of spirits
  ACTION_DEFINE_ARRAY cre_names BEGIN "bdsha01a" "bdsha01b" "bdsha01c" "bdsha06a" "bdsha06b" "bdsha06c" "bdsha12a" "bdsha12b" "bdsha12c" "bdsha18a" "bdsha18b" "bdsha18c" END
  OUTER_SET index = 1000
  ACTION_PHP_EACH cre_names AS _ => cre BEGIN
    COPY_EXISTING ~%cre%.cre~ ~override~
      SAY NAME1 (AT index)
      SAY NAME2 (AT index)
    BUT_ONLY IF_EXISTS
    OUTER_SET index += 1
  END

  // Updating strings in Shamanic Dance spell
  OUTER_SET strref_0 = RESOLVE_STR_REF(@1012) // No spirits answer your call.
  OUTER_SET strref_1 = RESOLVE_STR_REF(@1013) // A minor animal spirit answers your call.
  OUTER_SET strref_2 = RESOLVE_STR_REF(@1014) // A major animal spirit answers your call.
  OUTER_SET strref_3 = RESOLVE_STR_REF(@1015) // A minor nature spirit answers your call.
  OUTER_SET strref_4 = RESOLVE_STR_REF(@1016) // A major nature spirit answers your call.
  OUTER_SET strref_5 = RESOLVE_STR_REF(@1017) // You cannot summon any more creatures.
  ACTION_IF (GAME_IS ~bgee~) BEGIN
    ACTION_IF (GAME_INCLUDES ~sod~) BEGIN // BG:SoD
      ACTION_DEFINE_ASSOCIATIVE_ARRAY spl_strings BEGIN
        69613 => "%strref_0%"
        69614 => "%strref_1%"
        69615 => "%strref_2%"
        69616 => "%strref_3%"
        69617 => "%strref_4%"
        24529 => "%strref_5%"
      END
    END ELSE BEGIN  // BG:EE
      ACTION_DEFINE_ASSOCIATIVE_ARRAY spl_strings BEGIN
        32402 => "%strref_0%"
        32401 => "%strref_1%"
        32403 => "%strref_2%"
        32404 => "%strref_3%"
        32405 => "%strref_4%"
        24529 => "%strref_5%"
      END
    END
  END ELSE ACTION_IF (GAME_IS ~iwdee~) BEGIN
    ACTION_DEFINE_ASSOCIATIVE_ARRAY spl_strings BEGIN
      40909 => "%strref_0%"
      40910 => "%strref_1%"
      40911 => "%strref_2%"
      40912 => "%strref_3%"
      40913 => "%strref_4%"
      34748 => "%strref_5%"
    END
  END ELSE BEGIN  // BG2:EE, EET
    ACTION_DEFINE_ASSOCIATIVE_ARRAY spl_strings BEGIN
      103120 => "%strref_0%"
      103121 => "%strref_1%"
      103122 => "%strref_2%"
      103123 => "%strref_3%"
      103124 => "%strref_4%"
      74090 => "%strref_5%"
    END
  END

  COPY_EXISTING ~spsh004.spl~ ~override~
    READ_LONG 0x64 ofsAbil
    READ_SHORT 0x68 numAbil
    READ_LONG 0x6a ofsEffects

    FOR (idxAbil = 0; idxAbil < numAbil; idxAbil += 1) BEGIN
      SET ofsCurAbil = ofsAbil + (idxAbil * 0x28)
      READ_SHORT (ofsCurAbil + 0x1e) numAbilEffects
      READ_SHORT (ofsCurAbil + 0x20) idxFirstAbilEffect

      FOR (idxEffect = idxFirstAbilEffect; idxEffect < (idxFirstAbilEffect + numAbilEffects); idxEffect += 1) BEGIN
        SET ofsCurEffect = ofsEffects + (idxEffect * 0x30)
        READ_SHORT (ofsCurEffect + 0x00) opcode

        PATCH_IF (opcode = 139 || opcode = 318) BEGIN   // Display String, Protection from Spell
          SET curOfs = ofsCurEffect + ((opcode = 139) ? 0x04 : 0x2c)
          READ_LONG curOfs strref

          // find matching strref and replace
          PHP_EACH spl_strings AS curValue => newValue BEGIN
            PATCH_IF (strref = curValue) BEGIN
              WRITE_LONG curOfs newValue
            END
          END
        END
      END
    END
  BUT_ONLY

END
